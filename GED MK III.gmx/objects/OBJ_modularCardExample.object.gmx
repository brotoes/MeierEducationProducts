<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>SPR_cardFace</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/*The following code stores what sprites you want to be used in the display
 *of the card.
 *face is "body" of the card
 *image is whatever image is drawn onto the card in the top portion
 *description is written beneath the image
 *
 *it would not be difficult to add things to the card modularly.
 *for example, if you wanted to add a card difficulty class to the top, or
 *something
 *
 *finally, I did not spend much time making the card neat, it simply is a
 *demonstration of the idea/proof of concept
 */
//Please make image of size: 163x109px
self.face = SPR_cardFace
self.image = SPR_knife
self.title = "Stab"
self.description = "This card uses a knife to attack your foe.##Does a million billion damage. YAY!"
self.type = "Melee"
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/*This is just here so you can see the composite moving around, and
 * how it works dynamically.
 */
x = mouse_x
y = mouse_y
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/*Here you can see that the modular card is merely done by taking the object's
 *variables defined in the Create event and drawing them on top of one another.
 *Doing it this way, to create another card, you merely have to create a child
 *object with a different Create event!
 */
draw_sprite(self.face, -1, self.x, self.y)
draw_sprite(self.image, -1, self.x + 6, self.y + 30)
draw_text_ext(self.x + 8, self.y + 152, self.description, 12, 161)
draw_text_ext(self.x + 6, self.y + 11, self.title, 12, 161)
draw_text_ext(self.x + 100, self.y + 6, self.type, 12, 50)
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
