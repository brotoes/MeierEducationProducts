<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>SPR_controller</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>10000</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="7" enumb="4">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//count the number of iterations. For use with animation
iter_count = 0

//list of stages. Manually populate this list with the stages in the order
//that the player will go through them.
//please ensure that this list is of length equal to, or greater than the
//number of OBJ_stage_indicator instances in overworld_room
rooms_listid = ds_list_create()
ds_list_add(rooms_listid, waterfall_windmill_room)
ds_list_add(rooms_listid, mountain_room)
ds_list_add(rooms_listid, forged_wilds_room)
ds_list_add(rooms_listid, crystal_city_room)

//these colors to be used for path drawing
//they've been put here for easy manipulation
passed_path_color = make_color_rgb(255, 0, 0)
new_path_color = make_color_rgb(0, 0, 0)
path_bg_color = make_color_rgb(255, 255, 0)

//these variables store the stages in the overworld and how many of them
//the player has passed
stage_listid = ds_list_create()

//populate list with stage indicators
//sorted in the order they were placed in the world
for (i = 0; i &lt; instance_number(OBJ_stage_indicator); i ++) {
    ds_list_add(stage_listid, instance_find(OBJ_stage_indicator, i))
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//step the iteration count
iter_count ++

//find the counter for stages_passed
persistent_variables = instance_find(OBJ_persistent_variables, 0)
stages_passed = persistent_variables.stages_passed

//get the number of stages on the overworld
stage_count = ds_list_size(stage_listid)

//draw lines between all of the overworld's stage indicators
for(i = 0; i &lt; stage_count - 1; i ++) {
    //draw the outline of the line between stage indicators
    draw_set_color(path_bg_color)
    draw_line_width(ds_list_find_value(stage_listid, i).x, 
                    ds_list_find_value(stage_listid, i).y,
                    ds_list_find_value(stage_listid, i + 1).x, 
                    ds_list_find_value(stage_listid, i + 1).y, 14)

    //check what color to draw the line.
    //different color if the level has been passed
    if (i &lt; stages_passed) {
        draw_set_color(passed_path_color)
    } else {
        draw_set_color(new_path_color)
    }
    
    //draw the line between two level indicators
    draw_line_width(ds_list_find_value(stage_listid, i).x, 
                    ds_list_find_value(stage_listid, i).y,
                    ds_list_find_value(stage_listid, i + 1).x, 
                    ds_list_find_value(stage_listid, i + 1).y, 10)

    //if there is a new level available, indicate it.
    if (i == stages_passed) {
        draw_sprite(SPR_glow, iter_count % sprite_get_number(SPR_glow), 
                    ds_list_find_value(stage_listid, i).x,
                    ds_list_find_value(stage_listid, i).y)
    }
}
//account for fringe case: the user is on the final level. indicator needed
if (stages_passed == stage_count - 1) {
    draw_sprite(SPR_glow, iter_count % sprite_get_number(SPR_glow), 
                ds_list_find_value(stage_listid, stage_count - 1).x,
                ds_list_find_value(stage_listid, stage_count - 1).y)
}

draw_text(0,0, "User: for now, use up and down arrows
                to unlock and lock stages")
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="9" enumb="40">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>persistent_variables = instance_find(OBJ_persistent_variables, 0)
persistent_variables.stages_passed --
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="9" enumb="38">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>persistent_variables = instance_find(OBJ_persistent_variables, 0)
persistent_variables.stages_passed ++
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints>
    <point>0,0</point>
    <point>16,16</point>
  </PhysicsShapePoints>
</object>
