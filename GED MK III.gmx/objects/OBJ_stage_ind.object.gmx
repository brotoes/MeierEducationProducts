<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>SPR_stage_ind</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>-1</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>persistent_variables = instance_find(OBJ_persistent_variables, 0)
menu_controller = instance_find(OBJ_menu_controller, 0)

stage = 1
anim_counter = 0
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>visible = room == menu_room &amp;&amp; menu_controller.menu == MENU_GAME
//determine level by checking position relative to other indicators
stage = 1
for (i = 0; i &lt; instance_number(OBJ_stage_ind); i ++) {
    obj = instance_find(OBJ_stage_ind, i)
    if (obj.y &lt; y or (obj.y == y and obj.x &lt; x)) {
        stage ++    
    }
}

anim_counter ++
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="6" enumb="7">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if (persistent_variables.stage + 1 &gt;= stage and visible) {
    controller = instance_create(0, 0, OBJ_battle_controller)
    //TODO fill enemy creation queue
    //ds_list_clear(controller.queue_listid)
    //for (i = 0; i &lt; ds_list_size(persistent_variables.stages[stage - 1]); i ++) {
    //    new_enemy = ds_list_find_value(persistent_variables.stages[stage - 1], i)
    //   ds_list_add(controller.queue_listid, new_enemy)
    //}
    ds_list_copy(controller.queue_listid, persistent_variables.stages[stage - 1])
    ds_list_copy( controller.succession_listid, persistent_variables.succession[stage - 1])
    controller.stage = stage
    //change room, this will tell the battle controller to generate the battle
    room_goto(battle_room)
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>draw_set_font(FONT_big)
draw_sprite(sprite_index, persistent_variables.stage &gt;= stage, x, y)
if (persistent_variables.stage + 1 == stage) {
    draw_set_alpha(max(cos(anim_counter/30), cos(anim_counter/30 + pi)))
    draw_sprite(sprite_index, 1, x, y)
    draw_set_alpha(1)
}

str = string(persistent_variables.run) + " - " + string(stage)
draw_text_outlined(x + sprite_width/2 - string_width(str)/2,
            y + sprite_height/2 - string_height(str)/2, str,
            c_black, c_gray)
draw_set_font(FONT_normal)
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints>
    <point>-14,-9</point>
    <point>78,78</point>
  </PhysicsShapePoints>
</object>
