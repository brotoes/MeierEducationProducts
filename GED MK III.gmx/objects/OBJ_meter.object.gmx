<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>SPR_invis_meter</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>-100</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//To draw a meter for anything, just create me anywhere and set my veriables.
//remember to remember me in a variable and update my fill.

//variables for use by draw event
//these are defaults to prevent a crash in case the are not defined
//the calling object should

//length of bar in pixels, rounded down to multiple of 8
length = 80

//amount of bar filled. value should be &lt;= 1 &amp;&amp; &gt;= 0
fill = 1

//amount shown on bar for animated value change
visualized = fill

//color of the fill of the bar
fill_color = c_yellow
vis_color = c_red

//speed the bar empties or fills when value is changed
animate_speed = 0.05

//amount in the bar starts (to account for rounded sprites
bar_in = 4
vert_in = 2

alpha = 1

skinny = false

text_x = 0
text_y = 0

text = true
auto_ind = false
cur_num = 50
last_num = cur_num
first = true
second = false

col_count = 4
text_colors[0] = c_red
text_colors[1] = c_orange
text_colors[2] = c_yellow
text_colors[3] = c_green

font = FONT_big
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//animate
if (fill &gt; visualized) {
    visualized += animate_speed
    if (fill &lt; visualized) {
        visualized = fill
    }
} else if (fill &lt; visualized) {
    visualized -= animate_speed
    if (fill &gt; visualized) {
        visualized = fill
    }
}

dmg = last_num - cur_num
if (dmg != 0 and auto_ind and not first and not second) {
    last_num = cur_num
    ind = instance_create(text_x, text_y, OBJ_floating_number)
    draw_set_font(ind.font)
    ind_w = string_width(string(dmg))
    width = string_width(string(cur_num))
    
    ind.x = text_x
    
    ind.value = string(dmg)
    if (dmg &gt;= 0) {
        ind.color = c_red
    } else {
        ind.color = c_blue
    }
    draw_set_font(FONT_normal)
} else if (auto_ind and first) {
    first = false
    second = true
    last_num = cur_num
} else if (second) {
    second = false
    last_num = cur_num
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//TODO: animate again
//bound fill
if (fill &lt; 0) {
    fill = 0
}
if (fill &gt; 1) {
    fill = 1
}

x = floor(x)
y = floor(y)

//calculate values
spr_width = sprite_get_width(SPR_meter)
spr_height = sprite_get_height(SPR_meter)/(1 + skinny)
seg_count = floor(length/spr_width)
seg_count = max(2, seg_count)
x_offset = x + (length mod spr_width)/2

bar_start = x_offset + bar_in
bar_end = x_offset + spr_width*seg_count - bar_in
bar_len = floor((bar_end - bar_start)*fill)
vis_len = floor((bar_end - bar_start)*visualized)

//draw meter bar
draw_set_alpha(alpha)
if (bar_len == vis_len) {
    draw_set_color(fill_color)
    draw_rectangle(bar_start, y + vert_in, bar_start + bar_len,
                   y + spr_height - vert_in, false)
} else if (bar_len &lt; vis_len) {
    draw_set_color(vis_color)
    draw_rectangle(bar_start, y + vert_in, bar_start + vis_len,
                   y + spr_height - vert_in, false) 
    draw_set_color(fill_color)
    draw_rectangle(bar_start, y + vert_in, bar_start + bar_len,
                   y + spr_height - vert_in, false)
} else if (bar_len &gt; vis_len) {
    draw_set_color(vis_color)
    draw_rectangle(bar_start, y + vert_in, bar_start + bar_len,
                   y + spr_height - vert_in, false)
    draw_set_color(fill_color)
    draw_rectangle(bar_start, y + vert_in, bar_start + vis_len,
                   y + spr_height - vert_in, false) 
}
                   
//draw meter box
draw_sprite(SPR_meter, 3*skinny, x_offset, y)
for (i=1; i &lt; seg_count - 1; i ++) {
    draw_sprite(SPR_meter, 1 + 3*skinny, x_offset + i*spr_width, y)
}
draw_sprite(SPR_meter, 2 + 3*skinny, x_offset + (seg_count-1)*spr_width, y)

//draw number
if (text) {
    draw_set_font(font)
    str = string(cur_num)
    divide = 2 + 2*skinny
    body_color = c_black
    for (i = col_count - 1; i &gt;= 0; i --) {
        if (visualized &lt;= (i + 1)*(1/col_count)) {
            body_color = text_colors[i]
        }
    }
    draw_set_halign(fa_center)
    draw_set_valign(fa_middle)
    text_x = x + ((x_offset + seg_count*spr_width) - x)/2
    text_y = y + sprite_get_height(SPR_meter)/divide
    draw_text_outlined(text_x, text_y, str, body_color, c_black)
}
draw_set_halign(fa_left)
draw_set_valign(fa_top)
draw_set_color(c_black)
draw_set_alpha(1)

</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints>
    <point>0,0</point>
    <point>16,16</point>
  </PhysicsShapePoints>
</object>
