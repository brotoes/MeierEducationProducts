<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>SPR_shop_sheet</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>persistent_variables = instance_find(OBJ_persistent_variables, 0)

points_x[ELEMENT_FIRE] = ref_fire.x
points_y[ELEMENT_FIRE] = ref_fire.y

points_x[ELEMENT_EARTH] = ref_earth.x
points_y[ELEMENT_EARTH] = ref_earth.y

points_x[ELEMENT_METAL] = ref_metal.x
points_y[ELEMENT_METAL] = ref_metal.y

points_x[ELEMENT_WATER] = ref_water.x
points_y[ELEMENT_WATER] = ref_water.y

points_x[ELEMENT_WOOD] = ref_wood.x
points_y[ELEMENT_WOOD] = ref_wood.y

button_radius = 60

vert_offset = 32
hor_offset = 64

//load description information for upgrades
ini_open("desc.ini")
//stores strings for describing each level upgrade
//the first index is the element. the second index is the level
descriptions[ELEMENT_FIRE, 0] = "text goes here!"

elem_str[ELEMENT_FIRE] = "fire"
elem_str[ELEMENT_METAL] = "metal"
elem_str[ELEMENT_EARTH] = "earth"
elem_str[ELEMENT_WATER] = "water"
elem_str[ELEMENT_WOOD] = "wood"
elem_str[ELEMENT_NULL] = "null"

default_str = "The description will go here."

for (i = ELEMENT_FIRE; i &lt; ELEMENT_NULL; i ++) {
    for(j = 1; j &lt;= MAX_LEVEL; j ++) {
        descriptions[i, j] = ini_read_string(elem_str[i],
                                 "level" + string(j), default_str)
        if (descriptions[i, j] == default_str) {
            ini_write_string(elem_str[i], "level" + string(j), default_str)
        }
    }
}
ini_close()
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="6" enumb="56">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if (instance_number(OBJ_confirm_scr) == 0) {
    element = ELEMENT_NULL
    for (i = ELEMENT_FIRE; i &lt; ELEMENT_NULL; i ++) {
        distance = point_distance(mouse_x, mouse_y, points_x[i], points_y[i])
        if (distance &lt; button_radius) {
            element = i
        }
    }
    cost = persistent_variables.upg_cost[persistent_variables.upgrade[element] + 1]
    enough_gold = not is_string(cost)
    if (enough_gold) {
        enough_gold = persistent_variables.gold &gt;= cost
    }
    if (element != ELEMENT_NULL and persistent_variables.upgrade[element] &lt; MAX_LEVEL) {
        confirm = instance_create(0, 0, OBJ_confirm_scr)
        confirm.element = element
        confirm.level = persistent_variables.upgrade[element] + 1
        confirm.cost = cost
        confirm.description = descriptions[element, confirm.level]
        confirm.enough_gold = enough_gold
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>draw_self()
draw_set_font(FONT_big)
for(i = ELEMENT_FIRE; i &lt; ELEMENT_NULL; i ++) {
    draw_sprite(SPR_shop_elems, i, points_x[i], points_y[i])
    
    level = persistent_variables.upgrade[i]
    cost = string(persistent_variables.upg_cost[level + 1]) + "z"
    
    ind_x = points_x[i] - hor_offset
    ind_y = points_y[i] + vert_offset
    
    lvltxt_x = ind_x + sprite_get_width(SPR_upgrade)/2 - string_width(string(level))/2
    lvltxt_y = ind_y + sprite_get_height(SPR_upgrade)/2 - string_height(string(level))/2
    
    valtxt_x = points_x[i] + hor_offset - string_width(cost)
    valtxt_y = lvltxt_y
    
    draw_sprite(SPR_upgrade, 0, ind_x, ind_y)
    draw_set_color(c_green)
    draw_text(lvltxt_x, lvltxt_y, level)
    draw_set_color(c_black)
    draw_text(valtxt_x, valtxt_y, cost)
}
draw_set_font(FONT_normal)
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints>
    <point>0,0</point>
    <point>194,194</point>
  </PhysicsShapePoints>
</object>
