<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>SPR_controller</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//define inventory
//TODO: something determining if an item is available
store_inventory[0, 0] = OBJ_card_slash //object for sale
store_inventory[0, 1] = SPR_card_icon //object type (determines image)
store_inventory[0, 2] = 50 //object price
store_inventory[0, 3] = "Card: Slash" //object title

store_inventory[1, 0] = OBJ_card_hydrogen
store_inventory[1, 1] = SPR_card_icon
store_inventory[1, 2] = 40
store_inventory[1, 3] = "Card: Hydrogen"

store_inventory[2, 0] = OBJ_card_pressure
store_inventory[2, 1] = SPR_card_icon
store_inventory[2, 2] = 40
store_inventory[2, 3] = "Card: Pressure"

//because game maker is being annoying, update this manually to be the number
//of items in the store's inventory
item_count = 3

//create inventory items
box_start = instance_find(OBJ_reference, 0)
box_end = instance_find(OBJ_reference, 1)

//todo, due to 2 dimensions, array size may be miscounted
for (i = 0; i &lt; item_count; i ++) {
    merchandise = instance_create(box_start.x, box_start.y + i*64, OBJ_merchandise)
    merchandise.x_end = box_end.x
    merchandise.object = store_inventory[i, 0]
    merchandise.icon = store_inventory[i, 1]
    merchandise.price = store_inventory[i, 2]
    merchandise.name = store_inventory[i, 3]
    merchandise.item_index = i
}

scroll_offset = 0
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//check if item menu is in an inoptimal position.
//if it is, reset the scroll offset

to_reset = false
one_visible = false
one_dragged = false
//loop through merchandise
for (i = 0; i &lt; instance_number(OBJ_merchandise); i ++) {
    merchandise = instance_find(OBJ_merchandise, i)
    //first, check if all the items are off the screen
    if (merchandise.visible) {
        one_visible = true
    }
    //then, check if the top-most item is below the top
    if (merchandise.item_index == 0 and merchandise.y &gt; box_start.y) {
        to_reset = true
    }
    //finally, check if the user is currently dragging the items
    //if they are, don't do anything
    if (merchandise.dragged) {
        one_dragged = true
    }
}

if (not one_visible) {
    to_reset = true
}

if (one_dragged) {
    to_reset = false
}

if (to_reset) {
    scroll_offset = 0
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>draw_set_color(c_white)
draw_set_alpha(0.5)
draw_rectangle(box_start.x - 10, box_start.y - 10, box_end.x + 10, box_end.y + 10, false)
draw_set_alpha(1)
draw_rectangle(box_start.x - 10, box_start.y - 10, box_end.x + 10, box_end.y + 10, true)
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints>
    <point>0,0</point>
    <point>16,16</point>
  </PhysicsShapePoints>
</object>
