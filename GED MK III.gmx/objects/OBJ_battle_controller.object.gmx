<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>SPR_controller</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>-1</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>difficulty = 0
environment = 0
parent_room = room

//list of backgrounds
backgrounds[0] = BG_battlescape

whose_turn = 0
//stores which enemy is targetted by the player
target = OBJ_null
persistent_variables = instance_find(OBJ_persistent_variables, 0)
hp_current = persistent_variables.hp

//loot accumulated. This is given to the player upon winning the battle
gold_earned = 0

//TODO delete, here for debug
//enemy_listid = 0
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="1" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//carry out end of battle sequence
deck = instance_find(OBJ_deck, 0)
for (i = 0; i &lt; ds_list_size(deck.hand_listid); i ++) {
    card = ds_list_find_value(deck.hand_listid, i)
    ds_list_add(deck.deck_listid, card)
}
persistent_variables.gold += gold_earned
SCR_increase_exp(experience_earned)
room_goto(parent_room)
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>meter_hp.fill = hp_current/persistent_variables.hp

if (instance_number(OBJ_enemy_parent) == 0) {
    instance_destroy()
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="4">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>background_assign(0, backgrounds[0])

//right now, I'm treating difficulty as a "currency" the generator
//has to spend. It creates objects of random difficulty until it runs out
//this is a really simply way to treat the model. I'll definitely improve it
//in the future
enemy_listid = SCR_get_children(OBJ_enemy_parent)
next_x = 0
for (i = 0; difficulty &gt; 0; i ++) { 
    //TODO: choose position properly
    //TODO: a better way to determine turn order
    //TODO: smarter enemy selection
    //idea: create things other than enemies? e.g. environment pieces?
    randomize()
    new_index = irandom(ds_list_size(enemy_listid) - 1)
    new_enemy = instance_create(room_width/6 + next_x, 0,
                                ds_list_find_value(enemy_listid, new_index))
    next_x += new_enemy.sprite_width
    new_enemy.turn_priority = i + 1
    difficulty -= new_enemy.difficulty
}

//create health meters
meter_hp = instance_create(room_width - 64, room_height - 50, OBJ_meter)
meter_hp.vertical = true
meter_hp.length = room_height - 50
meter_hp.fill_color = c_red
meter_hp.fill = hp_current/persistent_variables.hp
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//placeholder

</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints>
    <point>0,0</point>
    <point>16,16</point>
  </PhysicsShapePoints>
</object>
