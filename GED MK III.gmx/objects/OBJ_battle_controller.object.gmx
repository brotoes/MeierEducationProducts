<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>SPR_controller</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>10000</depth>
  <persistent>-1</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>persistent_variables = instance_find(OBJ_persistent_variables, 0)
battle_banner = instance_find(OBJ_banner, 0)
music_cont = instance_find(OBJ_music_controller, 0)
stage = 0
parent_room = room

//list of enemies on screen currently. sorted by speed_stat, descending
enemy_listid = ds_list_create()

//will create these enemies when they become available
queue_listid = ds_list_create()
succession_listid = ds_list_create()

//list of backgrounds
backgrounds[0] = BG_battlescape

whose_turn = 0
//stores which enemy is targetted by the player
target = OBJ_null
hp_current = persistent_variables.hp_amount[persistent_variables.hp_lvl]
hp_max = hp_current

//rewards accumulated. This is given to the player upon winning the battle
gold_earned = 0

//record all killed enemies
killname_listid = ds_list_create()
killval_listid = ds_list_create()

//state variables
ready_to_draw = true
final_menu = false
victory = false
alarm_set = false
player_dmg_mult = 1

//number of pixels available to draw enemies in (width)
screen_space = room_width - (SCR_L_MARGIN + SCR_R_MARGIN)
used_space = 0

//stores x coords of all enemies
positions[0] = 0
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="1" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//carry out end of battle sequence
if (victory) {
    persistent_variables.gold += 
    floor(gold_earned*persistent_variables.gold_multiplier)
    persistent_variables.stage = max(stage, persistent_variables.stage)
}
room_goto(parent_room)

ds_list_destroy(killname_listid)
ds_list_destroy(killval_listid)
ds_list_destroy(queue_listid)
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="1">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>instance_create(0, 0, OBJ_end_screen)
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>battle_banner = instance_find(OBJ_banner, 0)
if (victory) {
    battle_banner.banner = SPR_victory_banner
    music_cont.victory = true
    music_cont.battle_over = true
} else {
    battle_banner.banner = SPR_defeat_banner
    music_cont.victory = false
    music_cont.battle_over = true
}
alarm[1] = 60
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>meter_hp.fill = hp_current/hp_max
meter_hp.cur_num = hp_current

if (instance_number(OBJ_enemy_parent) == 0 and not 
    alarm_set and ds_list_size(queue_listid) == 0
    and instance_number(OBJ_fade_out) == 0) {
    victory = true
    alarm[0] = 70
    alarm_set = true
} else if (hp_current &lt;= 0 and not alarm_set) {
    victory = false
    alarm[0] = 10
    alarm_set = true
}

//whose_turn = whose_turn mod (instance_number(OBJ_enemy_parent) + 1)

if (whose_turn != 0) {
    target = OBJ_null
    ready_to_draw = true
} else if (ready_to_draw) {
    player_dmg_mult = 1
    ready_to_draw = false
    randomize()
    cards_to_pop = persistent_variables.hand_size - instance_number(OBJ_card_parent)
    for (i = 0; i &lt; cards_to_pop; i ++) {
        //randomly create a card to put into the hand
        switch (irandom(ELEMENT_NULL - 1)) {
            case ELEMENT_FIRE: {
                card = instance_create(0, 0, OBJ_card_fire)
            } break
            case ELEMENT_EARTH: {
                card = instance_create(0, 0, OBJ_card_earth)
            } break
            case ELEMENT_METAL: {
                card = instance_create(0, 0, OBJ_card_metal)
            } break
            case ELEMENT_WATER: {
                card = instance_create(0, 0, OBJ_card_water)
            } break
            case ELEMENT_WOOD: {
                card = instance_create(0, 0, OBJ_card_wood)
            }
        }
    }
}

//spawn new enemies if queued and space available
while (whose_turn == 0 and ds_list_size(queue_listid) &gt; 0 and screen_space &gt; used_space) {
    new_enemy = instance_create(0, 0, ds_list_find_value(queue_listid, 0))
    enemy_size = sprite_get_bbox_right(new_enemy.sprite_index) - 
                    sprite_get_bbox_left(new_enemy.sprite_index)
    new_enemy.successor = ds_list_find_value(succession_listid, 0)
    new_enemy.turn_priority = instance_number(OBJ_enemy_parent)
    
    //maintain lists
    ds_list_add(enemy_listid, new_enemy)
    ds_list_delete(queue_listid, 0)
    ds_list_delete(succession_listid, 0)
    
    sort(enemy_listid, speed_comp)
    position_enemies(used_space, screen_space, enemy_listid)
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="4">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>background_assign(0, backgrounds[0])

while (ds_list_size(queue_listid) and screen_space &gt; used_space) {
    randomize()
    new_enemy = instance_create(0, 0, 
                                ds_list_find_value(queue_listid, 0))
    new_enemy.successor = ds_list_find_value(succession_listid, 0)
    ds_list_delete(queue_listid, 0)
    ds_list_delete(succession_listid, 0)
    new_enemy.turn_priority = instance_number(OBJ_enemy_parent)
    ds_list_add(enemy_listid, new_enemy)
}

sort(enemy_listid, speed_comp)
position_enemies(used_space, screen_space, enemy_listid)

//create meters
reference_hp = instance_find(OBJ_reference, 0)
meter_hp = instance_create(reference_hp.x, reference_hp.y, OBJ_meter)
meter_hp.length = room_width - 16
meter_hp.fill = hp_current/persistent_variables.hp_amount[persistent_variables.hp_lvl]
meter_hp.auto_ind = true
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//draw background
draw_background_stretched(BG_battlescape, 0, 0, room_width, room_height)
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints>
    <point>0,0</point>
    <point>16,16</point>
  </PhysicsShapePoints>
</object>
