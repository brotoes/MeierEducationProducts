<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>SPR_overlay</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>-9999</depth>
  <persistent>0</persistent>
  <parentName>OBJ_battle_overlay_parent</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>pers_vars = instance_find(OBJ_persistent_variables, 0)
current_disp = 0

//drawing variables
margin = 10
border = 4
tile_width = sprite_get_width(SPR_body)
tile_height = sprite_get_height(SPR_body)
start_x = margin + sprite_get_width(SPR_tab)
start_y = margin
end_x = room_width - margin
end_y = room_height - margin
scroll_offset = 0
row_width = end_x - start_x - tile_width*2
last_mouse_y = mouse_y
max_y_offset = 0

//load data from help.ini
title_listid = ds_list_create()
body_listid = ds_list_create()

ini_open("help.ini")

//load section titles
next_title = ini_read_string("titles", "section0", "default")
next_index = 1
while (next_title != "default") {
    ds_list_add(title_listid, next_title)
    next_title = ini_read_string("titles", "section" + string(next_index), "default")
    next_index ++
}

for (i = 0; i &lt; ds_list_size(title_listid); i ++) {
    title = ds_list_find_value(title_listid, i)
    next_body = ds_list_create()
    str = ""
    section = 0
    loop = true
    while (loop) {
        str = ini_read_string(title, "body" + string(section), "default")
        if (str == "default") {
            str = ini_read_string(title, "pic" + string(section), "default")
            if (str == "default") {
                loop = false
            } else {
                spr = ds_map_find_value(pers_vars.sprite_mapid, "SPR_" + str)
                ds_list_add(next_body, spr)
            }
        } else {
            ds_list_add(next_body, str)
        }
        section ++
    }
    ds_list_add(body_listid, next_body)
}

ini_close()

//modify body text to fit width
draw_set_font(FONT_big)
for (i = 0; i &lt; ds_list_size(body_listid); i ++) {
    cur_listid = ds_list_find_value(body_listid, i)
    for (j = 0; j &lt; ds_list_size(cur_listid); j ++) {
        str = ds_list_find_value(cur_listid, j)
        if (is_string(str)) {
            shorts_listid = split_string_w(str, row_width)
            ds_list_delete(cur_listid, j)
            for (k = 0; k &lt; ds_list_size(shorts_listid); k ++) {
                ds_list_insert(cur_listid, j + k, ds_list_find_value(shorts_listid, k))
            }
            j += k + 1
            ds_list_destroy(shorts_listid)
        }
    }
}
draw_set_font(FONT_normal)

//spawn tabs
for (i = 0; i &lt; ds_list_size(title_listid); i ++) {
    tab = instance_create(margin + border, 0, OBJ_help_tab)
    tab.title = ds_list_find_value(title_listid, i)
    tab.index = i
    tab.margin = margin
}

instance_create(room_width - 128, room_height - 64, OBJ_done_button)
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="1" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>ds_list_destroy(title_listid)
ds_list_destroy(body_listid)
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if (mouse_button == mb_left and mouse_x &gt;= start_x and mouse_x &lt;= end_x) {
    scroll_offset += mouse_y - last_mouse_y
}
last_mouse_y = mouse_y
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="6" enumb="56">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if (scroll_offset &gt; 0) {
    scroll_offset = 0
}

if (scroll_offset &lt; end_y - tile_height*2 - max_y_offset - 100) {
    scroll_offset = end_y - tile_height*2 - max_y_offset - 100
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string> draw_set_alpha(0.5)
draw_rectangle(0, 0, room_width, room_height, false)
draw_set_alpha(1)

body_str_listid = ds_list_find_value(body_listid, current_disp)

//draw box
for (cur_y = start_y + tile_height; cur_y &lt; end_y - tile_height; cur_y += tile_height) {
    for (cur_x = start_x + tile_width; cur_x &lt; end_x - tile_width; cur_x += tile_width) {
        draw_sprite(SPR_body, 4, cur_x, cur_y) 
    }
}

//draw body text
draw_set_font(FONT_big)
y_offset = 0
for (i = 0; i &lt; ds_list_size(body_str_listid); i ++) {
    to_draw = ds_list_find_value(body_str_listid, i)
    if (is_string(to_draw)) {
        text_x = start_x + tile_width
        text_y = start_y + tile_height + y_offset + scroll_offset
        next_offset = string_height(to_draw)
        if (text_y + next_offset &lt; end_y and text_y &gt; start_y) {
            draw_text(text_x, text_y, to_draw)
        }
        y_offset += next_offset
    } else {
        draw_x = start_x + tile_height
        draw_y = start_y + tile_height + y_offset + scroll_offset
        over_bottom = (draw_y + sprite_get_height(to_draw)) - (end_y - tile_height)
        over_top = (start_y + tile_height) - draw_y
        if (over_bottom and over_bottom &lt; sprite_get_height(to_draw)) {
            //off bottom of box, crop
            bottom = sprite_get_height(to_draw) - over_bottom
            draw_sprite_part(to_draw, 0, 0, 0, sprite_get_width(to_draw),
                             bottom, draw_x, draw_y)
        } else if (over_top and over_top &lt; sprite_get_height(to_draw)) {
            //off top of box, crop
            draw_sprite_part(to_draw, 0, 0, over_top, sprite_get_width(to_draw),
                             sprite_get_height(to_draw) - over_top, draw_x, draw_y + over_top)
        } else if (over_bottom &lt; 0 and over_top &lt; 0) {
            draw_sprite(to_draw, 0, draw_x, draw_y)
        }
        y_offset += sprite_get_height(to_draw)
    }
}
max_y_offset = max(y_offset, max_y_offset)
draw_set_font(FONT_normal)

//draw outline of box
draw_sprite(SPR_body, 0, start_x, start_y)
draw_sprite(SPR_body, 2, end_x - tile_width, start_y)
draw_sprite(SPR_body, 6, start_x, end_y - tile_height)
draw_sprite(SPR_body, 8, end_x - tile_width, end_y - tile_height)

cur_y = start_y
for(cur_x = start_x + tile_width; cur_x &lt;= end_x - tile_width*2; cur_x ++) {
    draw_sprite(SPR_body, 1, cur_x, cur_y)
}
cur_x = start_x
for(cur_y = start_y + tile_height; cur_y &lt;= end_y - tile_height*2; cur_y ++) {
    draw_sprite(SPR_body, 3, cur_x, cur_y)
}
cur_x = end_x - tile_width
for(cur_y = start_y + tile_height; cur_y &lt;= end_y - tile_height*2; cur_y ++) {
    draw_sprite(SPR_body, 5, cur_x, cur_y)
}
cur_y = end_y - tile_height
for(cur_x = start_x + tile_width; cur_x &lt;= end_x - tile_width*2; cur_x ++) {
    draw_sprite(SPR_body, 7, cur_x, cur_y)
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints>
    <point>0,0</point>
    <point>16,16</point>
  </PhysicsShapePoints>
</object>
