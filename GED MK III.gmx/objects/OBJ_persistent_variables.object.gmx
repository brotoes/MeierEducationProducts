<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>SPR_counter</spriteName>
  <solid>0</solid>
  <visible>0</visible>
  <depth>10000</depth>
  <persistent>-1</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//load save data
ini_open("savedata.ini")
gold = ini_read_real("data", "gold", 0)
gold_multiplier = ini_read_real("data", "gmult", 1)
//how many stages of the current runthrough has the player completed?
stage = ini_read_real("data", "stage", 0)
//which runthrough is the player on?
run = ini_read_real("data", "run", 1)
//upgrades of non-element items
hp_lvl = ini_read_real("data", "hp", 0)
purse_lvl = ini_read_real("data", "purse", 0)
//store player upgrades
upgrade[ELEMENT_NULL] = 0
for (i = ELEMENT_FIRE; i &lt; ELEMENT_NULL; i ++) {
    upgrade[i] = ini_read_real("data", "elem" + string(i), 1)
}
hand_size = ini_read_real("data", "hand", 7)
ini_close()

save_counter = 0

ini_open("gamedata.ini")

//what element level gives what base damage?
for (i = 0; i &lt;= MAX_LEVEL; i ++) {
    damage[i] = ini_read_real("elemDmg", "dmgAtLevel" + string(i), i)
    ini_write_real("elemDmg", "dmgAtLevel" + string(i), i)
}

//the cost to purchase a given upgrade
//element levels
for (i = 0; i &lt;= MAX_LEVEL; i ++) {
    upg_cost[i] = ini_read_real("elemUpgCost", "toLevel" + string(i), 50*i)
    ini_write_real("elemUpgCost", "toLevel" + string(i), upg_cost[i])
}
upg_cost[MAX_LEVEL + 1] = ini_read_string("elemUpgCost", 
                            "toLevel" + string(MAX_LEVEL + 1), "--")
ini_write_string("elemUpgCost", "toLevel" + string(MAX_LEVEL + 1), upg_cost[MAX_LEVEL + 1])

//purse levels
purse_cost[MAX_LEVEL + 1] = ini_read_string("elemUpgCost", 
                            "toLevel" + string(MAX_LEVEL + 1), "--")
ini_write_string("elemUpgCost", "toLevel" + string(MAX_LEVEL + 1), purse_cost[MAX_LEVEL + 1])
for (i = 0; i &lt;= MAX_LEVEL; i ++) {
    purse_cost[i] = ini_read_real("purseUpgCost", "toLevel" + string(i), 50*i)
    ini_write_real("purseUpgCost", "toLevel" + string(i), purse_cost[i])
}

                            
//hp levels
hp_cost[MAX_LEVEL + 1] = ini_read_string("hpUpgCost", 
                            "toLevel" + string(MAX_LEVEL + 1), "--")
ini_write_string("hpUpgCost", "toLevel" + string(MAX_LEVEL + 1), hp_cost[MAX_LEVEL + 1])
for (i = 0; i &lt;= MAX_LEVEL; i ++) {
    hp_cost[i] = ini_read_real("hpUpgCost", "toLevel" + string(i), 50*i)
    ini_write_real("hpUpgCost", "toLevel" + string(i), hp_cost[i])
}

//amount of hp the player will have given a level
hp_amount[0] = 0
for (i = 0; i &lt;= MAX_LEVEL; i ++) {
    hp_amount[i] = ini_read_real("hpAmnt", "hpAtLevel" + string(i), 50*(i+1))
    ini_write_real("hpAmnt", "hpAtLevel" + string(i), hp_amount[i])
}

//Object string map
enemy_mapid = ds_map_create()
children_listid = get_children(OBJ_enemy_parent)
for (i = 0; i &lt; ds_list_size(children_listid); i ++) {
    enemy_id = ds_list_find_value(children_listid, i)
    enemy_string = object_get_name(enemy_id)
    ds_map_add(enemy_mapid, enemy_string, enemy_id)
}
ds_list_destroy(children_listid)

//establish a list of stages and what enemies they will contain
stages[0] = 0
for (cur_stage = 0; cur_stage &lt; STAGE_COUNT; cur_stage ++) {
    stages[cur_stage] = ds_list_create()
    num_enemies = ini_read_real("stage" + string(cur_stage), "enemyCount", 2)
    ini_write_real("stage" + string(cur_stage), "enemyCount", num_enemies)
    for (cur_enemy = 0; cur_enemy &lt; num_enemies; cur_enemy ++) {
        enemy_name = ini_read_string("stage" + string(cur_stage), "enemy" + string(cur_enemy), "tiger")
        ini_write_string("stage" + string(cur_stage), "enemy" + string(cur_enemy), enemy_name)
        enemy_name = "OBJ_" + enemy_name
        ds_list_add(stages[cur_stage], ds_map_find_value(enemy_mapid, enemy_name))
    }
}

ini_close()

element_colors[ELEMENT_NULL] = c_black
element_colors[ELEMENT_FIRE] = c_red
element_colors[ELEMENT_EARTH] = c_yellow
element_colors[ELEMENT_METAL] = c_purple
element_colors[ELEMENT_WATER] = c_blue
element_colors[ELEMENT_WOOD] = c_green
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//TODO do this well
hp = 20 + hp_lvl*10

gold_multiplier = (purse_lvl/10) + 1

if (stage == instance_number(OBJ_stage_ind)) {
    stage = 0
    run ++
}

save_counter = (save_counter + 1) mod 100
if (save_counter == 0) {
    //write save data
    ini_open("savedata.ini")
    ini_write_real("data", "gold", gold)
    ini_write_real("data", "gmult", gold_multiplier)
    //how many stages of the current runthrough has the player completed?
    ini_write_real("data", "stage", stage)
    //which runthrough is the player on?
    ini_write_real("data", "run", run)
    //upgrades of non-element items
    ini_write_real("data", "hp", hp_lvl)
    ini_write_real("data", "purse", purse_lvl)
    //store player upgrades
    for (i = ELEMENT_FIRE; i &lt; ELEMENT_NULL; i ++) {
        ini_write_real("data", "elem" + string(i), upgrade[i])
    }
    ini_write_real("data", "hand", hand_size)
    ini_close()
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints>
    <point>0,0</point>
    <point>16,16</point>
  </PhysicsShapePoints>
</object>
