<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>SPR_parent</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//create health bar
meter_hp = instance_create(x, y + sprite_height, OBJ_meter)
meter_hp.length = sprite_width
meter_hp.fill_color = make_color_rgb(255, 0, 0)

//determines the order in which turns will be performed
turn_priority = 0

//stats
hp_total = 100
hp_current = 100
max_hand_size = 1
difficulty = 100

//loot
gold = irandom_range(0,1)

//enemy will draw from this deck.
deck_listid = ds_list_create()
//Idea: perhaps add a random element to the enemy's deck?
ds_list_add(deck_listid, OBJ_card_stab)

//determines how the enemy will chose cards to play
enemy_ai = SCR_AI_sample

current_hand_size = 0
hand_listid = ds_list_create()
//idea: do I need a discard stack?
battle_controller = instance_find(OBJ_battle_controller, 0)
targetted = false
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="1" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//Idea: loot variables in battle_controller
//TODO: death animation
with (meter_hp) instance_destroy()
battle_controller.target = OBJ_null
battle_controller.gold += gold
//update the turn priorities of enemies whose turns come after
for (i = 0; i &lt; instance_number(OBJ_enemy_parent); i ++) {
    to_update = instance_find(OBJ_enemy_parent, i)
    if (to_update.turn_priority &gt; turn_priority) {
        to_update.turn_priority --
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>cards_listid = script_execute(enemy_ai, id)
//TODO: assemble combo card
card_to_play = ds_list_find_value(cards_listid, 0)
card_played = instance_create(0, 0, card_to_play)
battle_controller.hp_current -= card_played.strength
with (card_played) instance_destroy()
to_destroy = ds_list_find_index(hand_listid, card_to_play)
ds_list_delete(hand_listid, to_destroy)
ds_list_add(deck_listid, card_to_play)
//queue up the next turn
if (turn_priority == instance_number(OBJ_enemy_parent)) {
    deck = instance_find(OBJ_deck, 0)
    battle_controller.whose_turn = 0
    deck.ready_to_draw = true
} else {
    battle_controller.whose_turn ++
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//check for death
if (hp_current &lt;= 0) {
    instance_destroy()
}

//check if it is this instance's turn
if (battle_controller.whose_turn == turn_priority and 
    hp_current &gt; 0 and alarm[0] == -1) {
    //draw new cards from deck
    //check how many cards need to be drawn
    cards_to_pop = max_hand_size - current_hand_size
    //randomize what cards are drawn from the deck
    randomize()
    ds_list_shuffle(deck_listid)
    //walk through the top of the deck until enough cards have been drawn
    for (i = 0; i &lt; cards_to_pop; i ++) {
        if (ds_list_size(deck_listid) &gt; 0) {
            //remove item from deck and place it in the hand
            popped_card = ds_list_find_value(deck_listid, 0)
            ds_list_delete(deck_listid, 0)
            ds_list_add(hand_listid, popped_card)
        }
    }
    alarm[0] = 30
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="6" enumb="4">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if (battle_controller.target == id) {
    //remove self from target variable in battle_controller
    battle_controller.target = 0
} else {
    battle_controller.target = id
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//Change variables. This doesn't need to be in draw, but it was
//convenient to put it here, at the time.
meter_hp.x = x + (sprite_width % sprite_get_width(SPR_meter))
meter_hp.y = sprite_height + sprite_get_height(SPR_meter) + y
//meter_hp.length = sprite_width
meter_hp.fill = hp_current / hp_total

//Draw the turn order indicators
draw_sprite(SPR_turn_flag, 0, x + sprite_width, y)
//TODO account for player's turn
draw_set_color(c_black)
draw_text(x + sprite_width + 9, y + 8, turn_priority + 1)

//draw targetting indicator
battle_controller = instance_find(OBJ_battle_controller, 0)
if (battle_controller.target == id) {
    scale = sprite_width/sprite_get_width(SPR_target)
    draw_sprite_ext(SPR_target, 1, x, 
                y + (sprite_height - sprite_get_height(SPR_target)),
                scale, 1, 0, c_white, 1)
    draw_self()
    draw_sprite_ext(SPR_target, 0, x, y + sprite_height, scale, 1, 0, c_white, 1)
} else {
    draw_self()
}

//draw correct number of card indicators below health bar
//TODO
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
