<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>SPR_parent</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>battle_controller = instance_find(OBJ_battle_controller, 0)
cycle = instance_find(OBJ_cycle, 0)
floor_inst = instance_find(OBJ_floor, 0)

//stats
hp_total = 10
difficulty = 150
dmg_max = 7
dmg_min = 4
speed_stat = 10

hp_current = hp_total
gold = irandom(50)

//status ailments
stun = 0
poison = 0
leech = 0

//control variables
targetted = false

//animation variables
animation_counter = irandom(100)
flash = 0
flash_time = 10
flash_color = c_red
flying = false
width = bbox_right - bbox_left
height = bbox_bottom - bbox_top
mouseover = false
bounce_time = 10
bounce_distance = 10
bounce_counter = 0
ail_x = 0
ail_y = 0
anim_heal = false
stagger_amnt = 64
stagger_shrink = 0.15
stagger_index = ds_list_find_index(battle_controller.enemy_listid, id)
stagger = false
shadow_alpha = 0.5
spawn_time = 30
spawn_counter = 0
anim_spawn = true

//this is used to determine damages
primary_element = ELEMENT_NULL

//create health bar
bar_overlap = 32
meter_hp = instance_create(x, y + height - bar_overlap, OBJ_meter)
meter_hp.length = width
meter_hp.skinny = true
meter_hp.text = false

name = "Enemy Parent"

//this enemy will be queued upon this enemy's death
//if it is not OBJ_null
successor = OBJ_null

battle_controller.used_space += bbox_right - bbox_left

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="1" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>battle_controller.target = OBJ_null
battle_controller.gold_earned += gold
ds_list_add(battle_controller.killname_listid, name)
ds_list_add(battle_controller.killval_listid, gold)
//remove self from list of enemies
index = ds_list_find_index(battle_controller.enemy_listid, id)
ds_list_delete(battle_controller.enemy_listid, index)

//update the turn priorities of enemies whose turns come after
/*for (i = 0; i &lt; instance_number(OBJ_enemy_parent); i ++) {
    to_update = instance_find(OBJ_enemy_parent, i)
    if (to_update.turn_priority &gt; turn_priority) {
        to_update.turn_priority --
    }
}*/

meter_hp.fill = 0
fade_out = instance_create(x, y, OBJ_fade_out)
fade_out.target_destroy = meter_hp
fade_out.fade_time = 1
fade_out.fade_sprite = sprite_index
fade_out.successor = successor
if (stagger) {
    fade_out.scale = 1 - (stagger_index mod 2)*stagger_shrink
    fade_out.scale_xoffset = ((sprite_width*stagger_shrink)/2)*(stagger_index mod 2)
    fade_out.scale_yoffset = (sprite_height*stagger_shrink)*(stagger_index mod 2)
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if (poison) {
    //TODO calculate this better
    dmg = poison
    hp_current -= dmg
    indicator_offset = sprite_width/2
    indicator = instance_create(x + indicator_offset, y + 50,
                                OBJ_floating_number)
    indicator.value = dmg
    indicator.color = C_POISON
    poison --
    flash = flash_time
    flash_color = C_POISON
    if (leech) {
        restore = leech
        battle_controller.hp_current += restore
        leech --
    }
}
battle_controller.whose_turn ++
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//check for death
if (hp_current &lt;= 0) {
    instance_destroy()
}

//check if it is this instance's turn
if (ds_list_find_value(battle_controller.enemy_listid, battle_controller.whose_turn - 1) == id and 
    hp_current &gt; 0 and alarm[0] == -1 and battle_controller.hp_current != 0) {
    alarm[0] = 30
}

//step animation
if (instance_number(OBJ_battle_overlay_parent) == 0 and not anim_spawn) {
    animation_counter ++
}

if (flash &gt; 0) {
    flash --
}

//cap hp
if (hp_current &gt; hp_total) {
    hp_current = hp_total
}

if (anim_heal) {
    randomize()
    anim_heal = false
    //create particles
    for (i = 0; i &lt; 100; i ++) {
        instance_create(x + irandom(sprite_width), y + irandom(sprite_height), OBJ_heal_particle)
    }
    //flash self
    flash = flash_time
    flash_color = C_HEAL
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="6" enumb="11">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>mouseover = false
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="6" enumb="10">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if (mouse_check_button(mb_left) and instance_number(OBJ_battle_overlay_parent) == 0) {
    mouseover = true
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="6" enumb="8">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>hp_current = 0
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="6" enumb="7">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if (battle_controller.target == id and mouseover) {
    //remove self from target variable in battle_controller
    battle_controller.target = OBJ_null
} else if (mouseover){
    battle_controller.target = id
}
mouseover = false
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="6" enumb="4">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if (instance_number(OBJ_battle_overlay_parent) == 0) {
    mouseover = true
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//change vertical height to match floor
y = floor_inst.y - height - 30

//if there are lots of enemies on the screen, stagger them.
if (stagger) {
    y -= stagger_amnt*(stagger_index mod 2)
    depth = (stagger_index mod 2)*10
}
meter_hp.depth = depth - 1

scale = 1
scale_xoffset = 0
scale_yoffset = 0
if (stagger) {
    scale = 1 - (stagger_index mod 2)*stagger_shrink
    scale_xoffset = ((sprite_width*stagger_shrink)/2)*(stagger_index mod 2)
    scale_yoffset = (sprite_height*stagger_shrink)*(stagger_index mod 2)
}

//Change variables. This doesn't need to be in draw, but it was
//convenient to put it here, at the time.
meter_hp.x = x
meter_hp.y = height + sprite_get_height(SPR_meter) + y  - bar_overlap
//meter_hp.length = sprite_width
meter_hp.fill = hp_current / hp_total
meter_hp.cur_num = hp_current

//amount the change y value for flying enemies
adjust_y = 0
//adjust height for flying
alpha = shadow_alpha
if (flying) {
    adjust_y -= 100
    adjust_y -= sin(animation_counter/15)*20
    alpha = shadow_alpha + (adjust_y + 100)/300
}

//draw shadow
draw_set_alpha(alpha)

shadow_left = x - adjust_y/2
shadow_right = x + width + adjust_y/2
shadow_top = y + height - 20 - (width - 100)/5 - adjust_y/7
shadow_bottom = y + height + 10

draw_ellipse(shadow_left, shadow_top, shadow_right, shadow_bottom, false)
draw_set_alpha(1)
draw_set_color(c_black)
               
//apply height adjustment
y += adjust_y

if (anim_spawn) {
    //spawn animation
    part_height = sprite_height*(spawn_counter/spawn_time)
    part_top = sprite_height - part_height
    draw_sprite_part_ext(sprite_index, 0, 0, part_top, sprite_width, part_height,
          x + scale_xoffset, y + scale_yoffset + part_top*scale, scale, scale, c_white, 1)
    draw_set_blend_mode(bm_add)
    dark = make_color_rgb(75, 75, 75)
    draw_sprite_part_ext(sprite_index, 1, 0, 0, sprite_width, part_top,
                x + scale_xoffset, y + scale_yoffset, scale, scale, dark, 1)
    for (i = 0; i &lt; 30; i ++) {
        glow_height =  i*(1-spawn_counter/spawn_time)
        if (glow_height + part_top &gt; sprite_height) {
            glow_height = sprite_height - part_top
        }
        draw_sprite_part_ext(sprite_index, 0, 0, part_top, sprite_width, glow_height,
            x + scale_xoffset - sprite_width*i/200, 
            y + scale_yoffset + part_top*scale, scale + i/100, scale, c_white, 1)
    }
    //for (i = 0; i &lt; sprite_height*scale; i ++) {
    //    draw_sprite_part_ext(sprite_index, 1, 0, part_top, sprite_width, max(part_height - i, 0),
    //        x + scale_xoffset, y + scale_yoffset + part_top*scale, scale, scale, dark, 1)
    //}
    draw_set_blend_mode(bm_normal)
    if (spawn_counter &gt;= spawn_time) {
        anim_spawn = false
    } else {
        spawn_counter ++
    }
} else {
    //draw self
    draw_sprite_ext(sprite_index, 0, x + scale_xoffset, y + scale_yoffset, scale, scale, 0, c_white, 1)
    draw_sprite_ext(sprite_index, 1, x + scale_xoffset, y + scale_yoffset, scale, scale, 0, flash_color, flash/flash_time)

    //draw ailments
    if (stun) {
        draw_sprite(SPR_ailstun, floor(animation_counter/10), x + ail_x, y + ail_y)
    }
    if (poison) {
        if (stun) {
            draw_sprite(SPR_ailpoison, floor(animation_counter/10),
                x + ail_x + sprite_get_width(SPR_ailstun), y + ail_y)
        } else {
            draw_sprite(SPR_ailpoison, floor(animation_counter/10), x + ail_x, y + ail_y)
        }
    }

    //draw selection indicator
    bounce_counter ++
    theta = bounce_counter/bounce_time
    bounce_offset = max(sin(theta), sin(theta+pi))*bounce_distance
    if (battle_controller.target == id) {
        draw_sprite(SPR_elem_select, primary_element,
                    x + sprite_width/2 - sprite_get_width(SPR_elem_select)/2,
                    max(y - sprite_get_height(SPR_elem_select)/2 - bounce_offset, 0))
    }
    if (mouseover and instance_number(OBJ_battle_overlay_parent) == 0) {
        draw_set_alpha(0.8)
        draw_set_blend_mode(bm_add)
        draw_sprite(SPR_elem_select, primary_element,
                    x + sprite_width/2 - sprite_get_width(SPR_elem_select)/2,
                    max(y - sprite_get_height(SPR_elem_select)/2 - bounce_offset, 0))
        draw_set_blend_mode(bm_normal)
        draw_set_alpha(1)
    }
    if (not mouseover and not battle_controller.target == id) {
        bounce_counter = 0
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints>
    <point>0,0</point>
    <point>16,16</point>
  </PhysicsShapePoints>
</object>
